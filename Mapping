/*

 MIDI MAPPING SECTION
 
 THE HANDLENOTEON CODE IS THE MAIN PART HERE, IT'S CALLED WHEN THE DEVICE LISTENS FOR INCOMING MIDI NOTES AND THEN MAPS NOTES TO DO THINGS.
 
 
 */


void sendProgramChange (byte Program, byte outchannel){
  Serial.write(ProgramChange);
  Serial.write(P);
  //  Serial.write(0);
  // Serial.write(outchannel);
}

void sendChangeControl(byte ControlNumber,byte ControlValue,byte outchannel){
  Serial.write(ControlChange);
  Serial.write(ControlNumber);
  Serial.write(ControlValue);
  //inchannel = inchannel;
  Serial.write(outchannel);
}

void sendNoteOff(byte inNote, byte invelocity, byte outchannel){
  Serial.write(NoteOff);
  Serial.write(inNote);
  Serial.write(invelocity);
  Serial.write(outchannel);
}
void checkdata(){
  //Serial.println(commandByte);
  //Serial.println(inNote);
  //Serial.println(invelocity);
}

void setNext(){
  tft.drawRect(35, 30, 128, 8, ST7735_BLACK);
  tft.fillRect(35, 30 , 128, 8, ST7735_BLACK); 
  tft.setCursor(35,30);
  tft.setTextColor(YELLOW);
  tft.println(nameFiles[filePOS]);

}

void HandleNoteOn (byte commandByte, byte inNote, byte invelocity){
  //if note X is sent, send program change control to go up
  //todo: 

  if (invelocity>0){ //needs to be greater than zero, not equal to,
    switch (inNote) {
    case 12: //note value of A#3 or 0x3a    
      if (S == 0){
        S=1;
       // draw_menu();
        MidiClockStart(true, true);
        startsignal = 1; 
      }
      else
      {
        S=0;
        //draw_menu();
        MidiClockStop();
        startsignal = 0; 
        SMF.close(); //probably working, but the player just moves to the next song...
        startsetup=1;
        // SMF.restart();    
    //    midiSilence();   //123	01111011	7B	[Channel Mode Message] All Notes Off	0
      }
      break;
    case 13: //note value of C4  or 0x3C, handles program change 'up'
      if (P == maxmidicount-2){    //this notes that the program is at the highest of 127 and needs reset to 0
        P=0;
        sendChangeControl(99,05,10);  //double check these control change msgs
        sendChangeControl(98,107,10);
        sendChangeControl(06,0,10);
        sendChangeControl(99,05,10);
        sendChangeControl(98,108,10);
        sendChangeControl(06,0,10);
        sendProgramChange(P,10);
        filePOS=(P+1);
        listStart=filePOS;
        setNextSong();  //this just sets up the next song var for the draw menu function.
      // Play_setup();
        draw_menu();


      }
      else
      {
        P++;                                //program change UP.
        sendChangeControl(99,05,10);
        sendChangeControl(98,107,10);
        sendChangeControl(06,0,10);
        sendChangeControl(99,05,10);
        sendChangeControl(98,108,10);
        sendChangeControl(06,0,10);
        sendProgramChange(P,10);
        filePOS=(P+1);
        listStart=filePOS;
        setNextSong();
       // Play_setup();
        draw_menu();
// open file
//  if (!FD.open("WGOB.MID", O_READ)) tft.print("can't open 2nd file");
  
      }
      break;
    case 14: // note value of D4  or 0x3E, handles program change 'down'.
      if (P== 0){
        P=maxmidicount-2;
        sendChangeControl(99,05,10);
        sendChangeControl(98,107,10);
        sendChangeControl(06,0,10);
        sendChangeControl(99,05,10);
        sendChangeControl(98,108,10);
        sendChangeControl(06,0,10);
        sendProgramChange(P,10); 
        filePOS=(P+1);
        listStart=filePOS;
        setNextSong();
        //Play_setup();
        draw_menu();
        //  setNext();
        //tft.drawRect(35, 30, 128, 8, ST7735_BLACK);
        //  tft.fillRect(35, 30 , 128, 8, ST7735_BLACK); 
        //        tft.setCursor(35,30);
        //        tft.setTextColor(YELLOW);
        //        tft.println(nameFiles[P]);



      }
      else 
      {
        P--;
        sendChangeControl(99,05,10);
        sendChangeControl(98,107,10);
        sendChangeControl(06,0,10);
        sendChangeControl(99,05,10);
        sendChangeControl(98,108,10);
        sendChangeControl(06,0,10);
        sendProgramChange(P,10);
        filePOS=(P+1);
        listStart=filePOS;
        setNextSong();
      //  Play_setup();
        draw_menu();
        //  setNext();
        //        tft.drawRect(35, 30, 128, 8, ST7735_BLACK);
        //        tft.fillRect(35, 30 , 128, 8, ST7735_BLACK);
        //        tft.setCursor(35,30);
        //        tft.setTextColor(YELLOW);
        //        tft.println(nameFiles[P]);



      }
      break;
    case 15:		//part 1 mute, M variable tells us if it's muted already;  all these mutes actually set the volume to zero, uses the volume NRPNs!
      if (M1==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,1,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 1
        //need to toggle it
        M1=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,1,10);
        sendChangeControl(06,120,10);
        M1=0;
      }

      break;
    case 16:
      if (M2==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,9,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 2
        //need to toggle it
        M2=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,9,10);
        sendChangeControl(06,120,10);
        M2=0;
      }
      break;
    case 17:   //mute for part 3
      if (M3==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,17,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 3
        //need to toggle it
        M3=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,17,10);
        sendChangeControl(06,120,10);
        M3=0;
      }
      break;
    case 18:
      if (M4==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,25,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 1
        //need to toggle it
        M4=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,25,10);
        sendChangeControl(06,120,10);
        M4=0;
      }
      break;
    case 19:
      if (M5==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,33,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 1
        //need to toggle it
        M5=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,33,10);
        sendChangeControl(06,120,10);
        M5=0;
      }
      break;
    case 20:
      if (M6a==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,41,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 1
        //need to toggle it
        M6a=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,41,10);
        sendChangeControl(06,120,10);
        M6a=0;
      }
      break;
    case 21:
      if (M6b==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,49,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 1
        //need to toggle it
        M6b=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,49,10);
        sendChangeControl(06,120,10);
        M6b=0;
      }
      break;
    case 22:
      if (M7a==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,57,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 1
        //need to toggle it
        M7a=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,57,10);
        sendChangeControl(06,120,10);
        M7a=0;
      }
      break;
    case 23:
      if (M7b==0) {
        sendChangeControl(99,5,10);
        sendChangeControl(98,65,10);
        sendChangeControl(06,0,10);  //sets level to zero, for part 1
        //need to toggle it
        M7b=1;
      }
      else {
        sendChangeControl(99,5,10);
        sendChangeControl(98,65,10);
        sendChangeControl(06,120,10);
        M7b=0;
      }
      break;


    } //end of switch (note)  



  }

  else{
    switch(inNote){
    case 12:
      sendNoteOff(12,0,10);
      break;
    case 13:
      sendNoteOff(13,0,10);
      break;
    case 14:
      sendNoteOff(14,0, 10);
      break;   
    case 15:
      sendNoteOff(15,0, 10);
      break;      
    case 16:
      sendNoteOff(16,0, 10);
      break;      
    case 17:
      sendNoteOff(17,0, 10);
      break;      
    case 18:
      sendNoteOff(18,0, 10);
      break;      
    case 19:
      sendNoteOff(19,0, 10);
      break;      
    case 20:
      sendNoteOff(21,0, 10);
      break;   
    case 21:
      sendNoteOff(21,0, 10);
      break;      
    case 22:
      sendNoteOff(22,0, 10);
      break;     
    case 23:
      sendNoteOff(23,0, 10);
      break;            

    }
  }

}








