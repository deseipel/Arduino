
#include <Adafruit_ST7735.h>
#include <Adafruit_GFX.h>
#include <SoftwareSerial.h>
#include <SdFatUtil.h>
#include <SdFat.h>
#include <SPI.h>
#include <MIDIFile.h>
#include <MIDIHelper.h>



/// Edit for Shield Pinouts!
#define SD_CS    4  // Chip select line for SD card
#define TFT_CS  10  // Chip select line for TFT display
#define TFT_DC   8  // Data/command line for TFT
#define TFT_RST  0  // Reset line for TFT (or connect to +5V)
#define ADA_JOYSTICK 3
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
MIDIFile SMF;  // or this breaks it.  POSSIBLY A CONFLICT WITH SERIAL ?  TFT?
SdFat	SD;





//  Joystick directions - Works with our screen rotation (1), yaay
enum { 
  Neutral, Press, Up, Down, Right, Left };
const char*  Buttons[]={
  "Neutral", "Press", "Up", "Down", "Right", "Left" };
#define Neutral 0
#define Press 1
#define Up 2
#define Down 3
#define Right 4
#define Left 5


// Check the joystick position
int CheckJoystick()
{
  int joystickState = analogRead(3);

  if (joystickState < 50) return Down;
  if (joystickState < 150) return Right;
  if (joystickState < 250) return Press;
  if (joystickState < 500) return Up;
  if (joystickState < 650) return Left;
  return Neutral;
} 

enum COLORS { 	
  BLACK = 0x0000, BLUE = 0x001F, RED = 0xF800, ORANGE = 0xFA60, GREEN = 0x07E0,
  CYAN = 0x07FF, MAGENTA = 0xF81F, YELLOW = 0xFFE0, GRAY = 0xCCCC, WHITE = 0xFFFF
};

enum arrows { 
  uarr = 0x18, darr = 0x19, larr = 0x1b, rarr = 0x1a, upyr = 0x1e, dpyr = 0x1f, lpyr = 0x11, rpyr = 0x10 };


////////////////////////////////////////////////////////////////////////////////
//  size 1 template:	12345678901234567890123456 <-- if last char is ON 26, \n not req'd; driver inserts it
//static char version[]={"simpleMenu.ino 2013SEP12"};
char textx[64];  // Made buffer big enough to hold two lines of text
////////////////////////////////////////////////////////////////////////////////
//  Static menu manager
#define MAX_SELECTIONS 5
#define MAX_PROMPT_LEN 20

char  nameFiles[128][20];
char name[20];
String strname = "";
SdFile root;
int filePOS = 0;
int fileIndex = 0;
int listStart = 1;
int maxmidicount;
/////////////////////////
//////////////
void clearFilelist(){
  tft.drawRect(0, 60, 128, 100, BLACK);
  tft.fillRect(0, 60 , 128, 100, BLACK); 
}

int topfile(int pos, int start, int index){
  
  int result;
  pos = filePOS;
  start = listStart;
  index = fileIndex;
  
if (filePOS>120){
  result = 7;
}
else
{
  result = 10; 
}
  return result;
}


//int maxfile = topfile(filePOS, listStart, fileIndex);
void drawFilelist(){
  clearFilelist();
  char msg[64];
  sprintf(msg, "listStart: %d\n filePOS: %d\n fileIndex: %d\n", listStart,  filePOS, fileIndex);
  Serial.print(msg);

  tft.setCursor(0,60);
   int maxfile = topfile(filePOS, listStart, fileIndex);
    Serial.println(maxfile);
//for(fileIndex = listStart; fileIndex < (listStart+10); fileIndex++){
     for(fileIndex = listStart; fileIndex < (listStart+maxfile); fileIndex++){
    if (fileIndex == filePOS) {
      tft.setTextColor(GREEN);
    }
    else
    {
      tft.setTextColor(WHITE);
    }


    tft.print(fileIndex);  
    tft.print(" ");
    tft.println(nameFiles[fileIndex]) ;
  }
}

void IndexFileNames(){
  //char test1[20];
  SD.vwd()->rewind();
  while (root.openNext(SD.vwd(), O_READ)) {
    root.getFilename(name);
    // Serial.println(name);
    root.close();
    strname = name;

    if (strname.endsWith(".MID")    ) {
      fileIndex++;          
      for (int i = 0; i<20; i++){

        if (name[i] != 0x00){
          nameFiles[fileIndex][i] = name[i];

        }

      }   
    }     
  }

  tft.setCursor(0,60);
maxmidicount = fileIndex;
}


struct MENUITEM {
  char label[MAX_PROMPT_LEN];
  int datatype;
  void* ptrGlobal;
  int min;
  int max;
  char** ptrGlobalLabels;
}  
;

//float  _voltmod = 0.5;
//float* _voltPtr = &_voltmod;
int 	_clockID = 0;
int* 	_clockPtr = &_clockID;
enum    _clockIDs { 
  INTCLOCK, EXTCLOCK };

int _mapperID=0;
int* _mapperPtr = &_mapperID;
enum _mapperIDs {
  ON, OFF};

static char *_mapperLabels[] = {
  "ON", "OFF"};
static char *_clockLabels[] = { 
  "INT","EXT" };
enum _menuitems { 
  CLOCK_SWITCH, MAPPER_SWITCH };
enum _menuDataTypes { 
  INT, FLOAT, OPTION };

static MENUITEM _mi_list[] ={// type, ptrGlobal, Min,    Max,    			ptrGlobalLabels
  { 
    "MIDI CLOCK:", 		OPTION,	_clockPtr,	0,	 (sizeof(_clockIDs)-1), _clockLabels      }
  ,
  { 
    "MIDI MAPPER:", OPTION, 	_mapperPtr, 0, (sizeof(_mapperIDs)-1), _mapperLabels     }
};


static uint16_t menu_color = WHITE;



struct SELECTION {
  char label[MAX_PROMPT_LEN];
  void(*function) ( int );
  int fn_arg;
}  
;

struct MENU {
  int id;
  char label[MAX_PROMPT_LEN];
  int num_selections;
  SELECTION selection[MAX_SELECTIONS];
} 
;


//  enumerated menu ids must be in order of static MENU menu[], as they are same as array's index
//enum _menus { MAIN_MENU, DEPWD_MENU, BALANCE_MENU };
enum _menus{ 
  MAIN_MENU, FILE_LIST, MAPPINGS, SETTINGS};  // 2/24/14


enum _menu_keys { 
  ADD, EDIT };

static MENU menu[] = {
  { 
    MAIN_MENU, "Main Menu", 4, {
      {
        "MIDI Files", goto_menu, FILE_LIST            }
      ,  
      {
        "Mappings", goto_menu, MAPPINGS            }
      ,
      {
        "Settings", goto_menu, SETTINGS            }
      ,
      {
        "Hide Menu", menu_hide, 0            } 
    }
  }
  ,
  { 
    FILE_LIST, "MIDI Files", 2, {
      {
        "Select a File", select_midi, 0            }
      ,  

      {
        "Go Back", goto_menu, MAIN_MENU            } 
    }
  }
  ,
  { 
    MAPPINGS, "MIDI Mappings Menu", 4, {
      {
        "Add New Mapping", add_mapping, ADD            }
      ,
      {
        "Edit Mapping", edit_mapping, EDIT            }
      ,
      {
        "Delete Mapping", delete_mapping, MAIN_MENU            }
      ,
      {
        "Go Back", goto_menu, MAIN_MENU            } 
    }
  }
  ,
  { 
    SETTINGS, "Settings", 4, {
      {
        "Map Events On/Off", mapping_onoff, static_cast<int>(MAPPER_SWITCH)            }
      ,
      {
        "Clock INT/EXT", clock_intext, static_cast<int>(CLOCK_SWITCH)            }
      ,
      {
        "Tempo", set_tempo, 0            }
      ,
      {
        "Go Back", goto_menu, MAIN_MENU            } 
    }
  }
};

MENU * curr_menu = menu;
int menu_enable = 0;
//  curr_selection is the SELECTION array index of the curr_menu
int curr_selection = 0;
void menu_hide( int ){ 
  menu_enable = 0; 
  cls; 
  draw_menu(); 
}



////////////////////////////////////////////////////////////////////////////////
//  Empty, sample action handling example functions
//void sample_func(){
//	tft.setCursor(0,60);	//uint16_t colorsave = tft.getTextColor(); tft.setTextColor( menu_color );
//	tft.print( textx );
//	delay( 1000 );
//	cls();  
////tft.setTextColor( colorsave );
//	draw_menu();
//}
void set_tempo(int key){
  tft.setCursor(0,60);
  tft.println("set tempo");

}

void mapping_onoff(int item){
  cls();
  tft.setTextColor( menu_color );
  sprintf( textx, "\n\n\n\n\nPress %c to exit\nUse %c & %c to adjust\n", larr, uarr, darr );
  tft.print( textx );
  int _x = 1;
  int _y = 3;
  for( uint8_t b = CheckJoystick(); b != Left; b = CheckJoystick() ) {
    void* tempNum;
    int *tempI;
    tft.setCursor(_x,_y);
    sprintf( textx,  "%s:\n", _mi_list[item].label );
    tft.print(textx);
    tft.setTextSize(2);

    if( _mi_list[item].datatype == OPTION || _mi_list[item].datatype == INT ) {
      tempI =  reinterpret_cast<int *>(_mi_list[item].ptrGlobal);
      if( b == Up  )
        *tempI += 1;
      else if( b == Down )
        *tempI -= 1;
      //  ints can implement wrap... might confuse but oh well...
      if( *tempI < _mi_list[item].min ) *tempI = _mi_list[item].max;
      if( *tempI > _mi_list[item].max ) *tempI = _mi_list[item].min;
    }
    if( _mi_list[item].datatype == OPTION )
      sprintf( textx, "%-12.12s\n", _mi_list[item].ptrGlobalLabels[*tempI] );
    if( _mi_list[item].datatype == INT )
      sprintf( textx, "%d\n", *tempI );
    tft.setCursor(0,20);
    tft.drawRect(0, 20, 35, 16, BLACK);
    tft.fillRect(0, 20 , 35, 16, BLACK);
    tft.print(textx);  //prints the ON or OFF
    tft.setTextSize(1);
    if( _mi_list[item].datatype == OPTION ) {
      sprintf( textx, "\n\noption index = %d, max = %d\n", *tempI, _mi_list[item].max );
      tft.setCursor(0,60);
      tft.print(textx);
    }
    if( b ) // control repeat speed
      delay(250);
  }
  //tft.setTextColor( colorsave );
  cls();
  draw_menu();


  //////////////////////////////////////////////////////////////////////////////////////////////////
}

void clock_intext (int key){
  tft.setCursor(0,60);
  tft.println("set the midi clock to int or ext");

}


void select_midi(int key){

  tft.setCursor(0,60);

  drawFilelist();

  for( uint8_t b = CheckJoystick(); b != Press; b = CheckJoystick() ) {
    if (b == Down){
      /////////////////////
     if (filePOS<127){
        if (filePOS>=(listStart+9) ){
          filePOS++;
          //listStart = filePOS;   
       listStart = listStart+1   ;
          drawFilelist();
          Serial.println("new page");
        }
        else
        {
          filePOS++;
          drawFilelist();
          Serial.println("goin down");
        }

     }


    }
    //////////////////////////
    else  if (b==Up){
if (filePOS>1){
      if (filePOS<=(listStart)){
        filePOS--;
       // listStart = filePOS-9;
       listStart = listStart-1;
        drawFilelist();
      }
      else
      {
        filePOS--;
        drawFilelist();
      }


    }}
    //
  }
  cls();
  draw_menu();
}

//this prints all the files names, but I only want 10 at a time, for all files (scrollable list).

//}

void add_mapping(int key){
  tft.setCursor(0,60);
  // sprintf(text,  "%s %d\n\nOMG you're RICH!", __FUNCTION__, key );
  tft.println("add a midi mapping");
}

void edit_mapping(int key){
  tft.setCursor(0,60);
  tft.println("select a mapping to edit"); 
}

void delete_mapping(int key){
  tft.setCursor(0,60);
  tft.println("select a mapping to delete");
}

////////////////////////////////////////////////////////////////////////////////
// Edit menu controller with cheesey type-dependent special cases
//void menu_edit( int key ){
//	//sprintf( text, "%s %d\n\nOMG you're RICH!", __FUNCTION__, key );
//	sample_func();
//}

////////////////////////////////////////////////////////////////////////////////
// Set & display active menu
void goto_menu ( ) {
  //  a_menu is working copy of curr_menu, which will get reset to our parent
  static MENU *a_menu = curr_menu;
  //	Create a selection pointer for convenience
  //  the LAST selection in a menu must be to "go up" a menu
  static SELECTION *selptr = &a_menu->selection[ curr_selection ];
  curr_menu = &menu[selptr->fn_arg ];
  curr_selection=0;
  cls();
  draw_menu();
  return;
}
void goto_menu ( int newmenu ) {
  curr_menu = &menu[newmenu];
  curr_selection=0;
  cls();
  draw_menu();
  return;
}


////////////////////////////////////////////////////////////////////////////////
bool doMenu( void ){
  //uint8_t b = checkJoystick();

  uint8_t b = CheckJoystick();
  if( b == Neutral ){
    return false;   //  user input didn't happen
  }

  //  enable menu if up, else ignore input & return  ---------------------------------------
  if( ! menu_enable ) {
    if( b == Up ) {
      menu_enable = 1;
      curr_selection = 0;   //  start with top item as selected
      cls();
      draw_menu();
    }
    return 0;
  }

  //-----------------------------------------------------------------------------------------
  SELECTION *selptr = &curr_menu->selection[ curr_selection ];
  tft.setCursor(0,10);
  // const char* Buttons[]={"Neutral", "Press", "Up", "Down", "Right", "Left" };
  if( b == Up ) {
    if(curr_selection > 0)
      curr_selection--;
    else    //  wrap around
    curr_selection = curr_menu->num_selections-1;
  } 
  else if( b == Down ) {
    if(curr_selection < curr_menu->num_selections-1 )
      curr_selection++;
    else
      curr_selection=0;
  } 
  else if( b == Left ) {    //  back out to higher menu
    menu_parent();
  } 
  else if( b == Right || b == Press ) {
    // curr_menu->selection[curr_selection].function();
    selptr->function( selptr->fn_arg );
  }
  if( b == Up || b == Down )
    draw_menu( );
  return true;    //  user input happened
}
////////////////////////////////////////////////////////////////////////////////
//  Finds parent of current menu and resets curr_menu to it and draws menu
void menu_parent( ){
  curr_selection=0;
  //  already at top of menu, so hide it. &menu[0] used as is more obvious than just 'menu'
  if( curr_menu == &menu[0] && menu_enable ) {
    menu_enable = false;
  } 
  else {
    //  a_menu is working copy of curr_menu, which will get reset to our parent
    MENU *a_menu = curr_menu;
    //	Create a selection pointer for convenience
    //  the LAST selection in a menu must be to "go up" a menu
    static int num_menus=sizeof(_menus);
    SELECTION *selptr = &a_menu->selection[ a_menu->num_selections - 1 ];
    for( int menuidx = 0; menuidx < num_menus ; menuidx++ ) {
      if( selptr->fn_arg == menu[menuidx].id ) {
        curr_menu=&menu[menuidx];
        curr_selection=0;
        break;
      }
    }
  }
  cls();
  draw_menu();
}
////////////////////////////////////////////////////////////////////////////////
//  displays the currently selected menu (or uarr for menu if not enabled)
void draw_menu( ){
  if( ! menu_enable ) {
    cls();

    sprintf( textx, "%c for menu", uarr );
    tft.print( textx );
    
    tft.setCursor(1, 20);
    tft.setTextColor(GREEN);
    tft.print("File: ");
    tft.println(nameFiles[filePOS]);
    tft.setCursor(1,50);
    tft.setTextColor(RED);
    tft.setTextSize(2);
    tft.print("Tempo: ");
    tft.setTextSize(1);
    //guiFooter();
    return;

  }
  //	//uint16_t colorsave = tft.getTextColor();
  tft.setTextColor( menu_color );
  tft.setCursor(0, 2);
  //Serial.println(freeMemory());
  //	//  magic number alert! set %-20.20s to same value as MAX_PROMPT_LEN

  sprintf( textx, "%-20.20s\n", curr_menu->label );
  tft.print(textx);
  int selection_num = 0;
  //	// Loop through the actual number of selections in THIS menu
  for(selection_num=0; selection_num < curr_menu->num_selections; selection_num++)
  {
    //		// Create a pointer for convenience
    SELECTION *selptr = &curr_menu->selection[selection_num];
    //		//	If this is the "active" menu selection (determine by referencing the global
    //		//	variable 'curr_selection' then draw it in inverse text.
    if (selection_num == curr_selection)
      tft.setTextColor(BLUE);
    //		// Print the prompt string
    //tft.setCursor(selection_num + MENU_INDENT_Y, MENU_INDENT_X);
    sprintf( textx, "  %-20.20s\n", selptr->label );
    tft.print(textx);
    //		// Turn inverse back off if need be
    if (selection_num == curr_selection)
      tft.setTextColor(RED);
  }

  tft.setTextColor( WHITE );

}
////////////////////////////////////////////////////////////////////////////////
void setup(){
  tft.initR( INITR_BLACKTAB );    //  "tab color" from screen protector; there's RED and GREEN, too.

  //tft.setTextColor(RED);
  tft.fillScreen(BLACK);
  tft.setTextSize(1); //  1 = 5x8, 2 = 10x16; chars leave blank pixel on bottom
  tft.println("TFT Setup Completed");
  //delay(500);
  //	cls();
  Serial.begin(9600);
  // Serial.print("freeMemory()=");

  // SMF.begin(&SD);
  //if (!SD.begin(SD_CS, SPI_HALF_SPEED)) SD.initErrorHalt();
  if (!SD.begin(SD_CS, SPI_HALF_SPEED))
  {
    Serial.print("\nSD init fail!");
    tft.println("SD init fail!");
    return;
  }

  //Serial.println("draw_menu");
  draw_menu();
  IndexFileNames();   //get a count of the MID files
  //Serial.println("Setup completed");
  //delay(500);
  //cls();

  SMF.begin(&SD);

}

////////////////////////////////////////////////////////////////////////////////
//  clearscreen helper for tft
void cls() {
  tft.fillScreen(BLACK);
  tft.setCursor(0, 2);
}



////////////////////////////////////////////////////////////////////////////////
void loop() {

  if( doMenu() ){
    //
    //  
    //		//  something happened with joystick, an update() action could be called here
  }

}



