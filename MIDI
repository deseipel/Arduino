
void CheckMIDI(){
  while (Serial.available() > 2){
    byte indata = Serial.read();
    if (indata >=144 && indata <= 159){          //144 is simply 0x90 or MIDI noteOn, there are 15 (0-15) possible channels so the max is 159 or 0x9F. I only care about NoteOn status messages.
      // Serial.println("NoteOn rxd");
      commandByte = indata;//read first byte
      inNote = Serial.read();//read next byte
      invelocity = Serial.read();//read final byte
      inchannel = (commandByte - 144);
      HandleNoteOn(commandByte, inNote, invelocity);
    }
  }  //new while end bracket
}



void timerStart()
{
  TCCR1A = TCCR1B = 0;
  bitWrite(TCCR1B, CS11, 1);   //Sets the prescaler at 8
  // bitWrite(TCCR1B, CS10,  1);  //try setting the prescaler
  // bitWrite(TCCR1B, CS12, 1);
  bitWrite(TCCR1B, WGM12, 1);   //turns on CTC mode
  timerSetFrequency();
  bitWrite(TIMSK1, OCIE1A, 1);  //enables timer compare interrupt
}

void timerSetFrequency()
{
  // Calculates the Frequency for the Timer, used by the PPQ clock (Pulses Per Quarter Note) //
  // This uses the 16-bit Timer1, unused by the Arduino, unless you use the analogWrite or Tone functions //
#define frequency (((bpm)*(PPQ))/60)
  OCR1A = (F_CPU/ 8) / (frequency - 1);   //at 100bpm for 96ppq, the count register is 12,578.
  // OCR1A = (F_CPU/1024)/ (frequency-1);
}

void timerStop(void)
{
  bitWrite(TIMSK1, OCIE1A, 0);
  TCCR1A = TCCR1B = OCR1A = 0;
}

// MIDI ClockTimer Call - here's where all the MIDI Sequencing Action Happens - 
ISR(TIMER1_COMPA_vect) { 
  midiTimer(); 
}
// ======================================================================================= //
void midiTimer()
{
  if (midiClockType == 2)   // SOMEWHAT UN-USED, 2 stands for Internal clock
  {
    if ((sync24PPQ == (0)) && (S==1)  ){    //  ok, so since I'm using 96 ppq and I need to send clock every 4th time, the sync24ppq variable accomplishes that.  I also call the Play code here
      // Serial.write(0xF8); // Midi Clock Sync Tick (96 PPQ)
      SMF.setTick(1); //this just lets me tell the library that a clock tick is active.

      // Play();
      Serial.write(0xF8); // Midi Clock Sync Tick (96 PPQ)
      // tick_count = SMF.getTickCount();
    }
    //    else 
    //    {
    ////      // else if ( (S==1) && ((sync24PPQ < (PPQ/24 ) )))  //doesn't work well, causes notes to run together at loop.
    //      if (  (S==1) && (sync24PPQ == (1||2||3)))  // do not change this, it affects the looping ability
    //     {
    //        SMF.setTick(0);
    //        Play(); 
    //////      //   tick_count = SMF.getTickCount();
    //     }      
    //    }
    sync24PPQ++;
    //    SMF.getTickCount();
    tick_count++; //COUNT THE TICKS SO YOU CAN CALCULATE HOW MUCH TIME HAS PASSED SO YOU CAN PLAY IN TIME IN THE MFTRACK CODE.
    SMF.setTickCount(tick_count);

    if (sync24PPQ >= (DIV)) {


      sync24PPQ = 0;    
      //Play();    //DO NOT PLAY HERE, ALREADY PLAYS ON 0,1,2,3.  THIS IS RIGHT.
      //       tft.drawRect(10, 80, 128, 5, ST7735_BLACK);
      //    tft.fillRect(10, 80 , 128, 5, ST7735_BLACK); 
      //    tft.setTextColor(ST7735_BLUE);
      //  //  tft.setTextSize(1);
      //    tft.setCursor(10, 80);
      //    tft.print(int(tick_count));

    }
  }
 
}

void CloseOut(){
  SMF.close(); 
  if (Play_setup())  //this is the code that handles the looping of the midi files
  {          
  } 
}

void Playit(){  
  // this is called at a rate of 24PPQ from the timer.  Probably don't need the S=1 if statement.  
  SMF.setLastTime(micros()); // might not need this and I don't like using micros for timing, unreliable.
  SMF.setTickCount(tick_count); 
  tick_count=SMF.getTickCount();  

  // while(!SMF.isEOF() ) {
  if(!SMF.isEOF()){
    //tft stuff here is bad for midi clock
    SMF.Play();
    //SMF.dump();
  }  
  else
  {
    if (SMF.isEOF())
    {  
      tick_count = SMF.getTickCount();  
      float fbars = ceil(tick_count/(384.00));   //this returns the rounded up number of bars.  384 is the number of ticks in one bar of 4/4 (assumes 96 PPQ and 4/4 time).  
      //384 = 1 bar, 1536 = 4 bars, 3072 = 8 bars, 4608 = 12 bars.  
      int bars = (int(fbars));    
      tick_count = ((tick_count) - ((bars) * (384) ) )  ;  // +12 is to account for the usual 3 clocks at the start of a midi file.   ?  doesn't appear to wrk well by adding 12.
      SMF.setTickCount(tick_count);
      // SMF.setDelta(0);    //this has to be resset to work with the tick_count being a negative number, this is reset in the library code when SMF.close is called.
      // SMF.setTickCount(0);
      // tick_count=0;
      CloseOut();  
      sync24PPQ = 0; 
      //  MidiClockStop();
      //    SMF.close();   
    }
    //  if (started ==0)  //checks to see if MIDI clock has started, might be not needed.
    //  {
    //    Serial.write(0xFA);  //MIDI Start event, does this once.
    //    started=1; 
    //  }
    //
    //
    //if (SMF.getTick()==1) Serial.write(0xF8); // Midi Clock Sync Tick (96 PPQ)    
  }
}
void FileNameCheck()   //this handles setting up a file to play and also lets me queue up the next file during playback.  Called during Play_setup.
{
  if (P == oldP) {    //this means the next cued up file is the same one that just played.
    SMF.setFilename(nameFiles[filePOS]);
    // track_cnt=SMF.getTrackCount();
    //       tft.setCursor(10, 70);
    //       tft.print("Tracks: ");
    //    tft.println(track_cnt);
    //
  }
  else  //the next file differs from the one just played.
  {
    //track_cnt=SMF.getTrackCount();
    SMF.setFilename(nameFiles[filePOS]);   //this means the next cued up file is different than the previous one.
    //  // err = SMF.load();    //test to see if this works
    oldP = P;
    filePOS= P+1;
    setCurrentSong();
    // draw_menu(); // this messes up the timing only when this is called from within the timer.  Also messes up the timing of the midi playback outside of the timer. DO NOT Enable.

    tft.drawRect(30, 20, 128, 8, ST7735_BLACK);
    tft.fillRect(30, 20 , 128, 8, ST7735_BLACK); 
    tft.setTextColor(ST7735_BLUE);
    tft.setCursor(30, 20);
    tft.print(" ");
    tft.print(nameFiles[filePOS]);
   // tft.setCursor(10, 70);
   // tft.print("restarted");
    //    tft.print("Tracks: ");
    //    tft.println(int(track_cnt));

  }
}


bool Play_setup(){   
  int  err = -1;
  

  FileNameCheck();
  //  load every time?  Or only if not playing (S==0) ?


  err = SMF.load(); 
 int tpq = SMF.getTicksPerQuarterNote();
 //NEED TO FIND A WAY TO PRELOAD SONGS BETTER.

 // track_cnt=SMF.getTrackCount();
  PPQ = tpq;   //may not work correctly when looping...  a change to the PPQ affects the timer frequency. 
    SMF.setTicksPerQuarterNote(PPQ);
    DIV = (PPQ/24);
      SMF.setTempo(  bpm); //should only have to set this once.
      timerSetFrequency();
  //  
  if (err != -1)
  {
    tft.setCursor(5, 120);
    tft.print("MIDI File Load Error" );
    tft.println(err);
    return (false);
  }
  //else
  //{
  // SMF.dump();
  //}
 // draw_menu();                                       //THIS MAY BE BAD
  return (true);


}

// ======================================================================================= //
void MidiClockStart(uint8_t restart, uint8_t callMidiTimer)    //  usage is MidiClockStart(true, true);   
{

  midiClockRunning = 1;
  // stepsPos = midiClockShuffleCounter = 0;
  //  if (autoSteps) { editStepsPos = 0; doPatternLCDupdate = 1; }
  if (restart)
  {
    // midiClockProcess = 1;
    sync24PPQ = 0;
    // midiClockCounter  = 0;
  }
  if (midiClockType == 2) Serial.write(0xFA); // MIDI Start


  if (midiClockType != 1) timerStart();
  if (callMidiTimer == 1) midiTimer();

  //Play the midi file
  //need a pre-load routine to load the MIDI file & setup stuff.

  if (!Play_setup()){
    //////   Playit(); 
    //////  }
    //////  else
    //////{
    MidiClockStop();
    SMF.close();
    S==0;
  }


}

// ======================================================================================= //
void MidiClockStop()
{
  midiClockRunning = 0;
  if (midiClockType == 2) Serial.write(0xFC); // MIDI Stop
  if (midiClockType != 1) timerStop();
  // sendMidiAllNotesOff();
  midiSilence();
  tick_count = 0; 
  started = 0; 

  long long tcount,delta;
  long long newtcount;
  tcount = SMF.getTickCount();
  delta = SMF.getDelta();


  float fbars = ceil((tcount/384.00));   //little trick here, ceil rounds up a floating point number, had to add decimal to 384 for this to work.
  int bars = int(fbars);
  // bars = bars * 384;
  newtcount = ((tcount) - ((bars) * (384) ) );
  //
  //     tft.setCursor(5, 110);
  //     tft.print("Dcount: ");
  //     tft.print(SMF.getDcount());
  tft.setCursor(5, 120);
  tft.print("count  ");
  tft.println(int(tcount) );
  tft.print("delta  ");
  tft.println(int(delta));
  tft.print("bar  ");
  tft.println(bars);
  tft.print("new_count  ");
  tft.println(int(newtcount));

  SMF.setDelta(0);
  SMF.setTickCount(0);



}

int getBars()
{
  uint32_t tcount;
  tcount = SMF.getTickCount();
  //delta = SMF.getDelta();
  float bars = ceil(tcount/384.00);   //little trick here, ceil rounds up a floating point number, had to add decimal to 384 for this to work.

  return (bars);
}

// ======================================================================================= //
void MidiClockNewTime()
{
  if (midiClockType != 1) timerSetFrequency();
}


void midiSilence(void)
// Turn everything off on every channel.
// Some midi files are badly behaved and leave notes hanging, so between songs turn
// off all the notes and sound
{
  midi_event	ev;

  // All sound off
  // When All Sound Off is received all oscillators will turn off, and their volume
  // envelopes are set to zero as soon as possible.
  ev.size = 0;
  ev.data[ev.size++] = 0xb0;
  ev.data[ev.size++] = 120;
  ev.data[ev.size++] = 0;

  for (ev.channel = 0; ev.channel < 16; ev.channel++)
    midiCallback(&ev);
}



void midiCallback(midi_event *pev)
// Called by the MIDIFile library when a file event needs to be processed
// thru the midi communications interface.
// This callback is set up in the setup() function.
{
  if ((pev->data[0] >= 0x80) && (pev->data[0] <= 0xe0))
  {
    Serial.write(pev->data[0] | pev->channel);
    Serial.write(&pev->data[1], pev->size-1);
  }
  else
  {
    Serial.write(pev->data, pev->size);
  }


}

